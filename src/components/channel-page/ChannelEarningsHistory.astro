---
const { data } = Astro.props;
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { BarChart3, TrendingUp, TrendingDown } from "lucide-react";
import { formatNumber, toTitleCase } from "@/utils/helper";

// Generate mock earnings data for the last 14 days
const generateEarningsData = () => {
  const today = new Date();
  const earnings = [];

  for (let i = 13; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(today.getDate() - i);

    // Simulate daily earnings with some variation
    const baseEarnings = data.avgDailyViews * (data.finalCPM / 1000);
    const variation = 0.8 + Math.random() * 0.4; // Â±20% variation
    const dailyEarnings = Math.round(baseEarnings * variation);

    earnings.push({
      date: date.toISOString().slice(0, 10),
      earnings: dailyEarnings,
      formatted: date.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
      }),
    });
  }

  return earnings;
};

const earningsData = generateEarningsData();
const totalEarnings = earningsData.reduce((sum, day) => sum + day.earnings, 0);
const avgDailyEarnings = totalEarnings / earningsData.length;
const maxEarnings = Math.max(...earningsData.map((d) => d.earnings));
const minEarnings = Math.min(...earningsData.map((d) => d.earnings));

// Calculate growth (mock comparison with previous period)
const growthRate = 12.5; // Mock growth rate
const isPositiveGrowth = growthRate > 0;
---

<Card>
  <CardHeader>
    <CardTitle className="flex items-center gap-2 text-lg md:text-xl leading-tight">
      <BarChart3 className="h-5 w-5" />
      Earnings History for {toTitleCase(data.title)} (Last 14 Days)
    </CardTitle>
    <div class="flex flex-wrap items-center gap-2 pt-2">
      <Badge
        variant={isPositiveGrowth ? "default" : "destructive"}
        className="flex items-center gap-1"
      >
        {
          isPositiveGrowth ? (
            <TrendingUp className="h-3 w-3" />
          ) : (
            <TrendingDown className="h-3 w-3" />
          )
        }
        {Math.abs(growthRate)}% vs previous period
      </Badge>
    </div>
    <p class="mt-2 text-sm md:text-base text-slate-700 leading-relaxed pt-2">
      This chart shows the last 14 days of estimated YouTube income for{" "}
      <strong>{toTitleCase(data.title)}</strong>. It includes daily earnings,
      highest day, and average performance, based on CPM and views.
    </p>
  </CardHeader>

  <CardContent>
    {/* Stats Grid */}
    <div
      class="mb-6 grid grid-cols-1 sm:grid-cols-3 gap-4 rounded-lg bg-slate-50 p-4"
    >
      <div class="text-center">
        <p class="text-lg md:text-xl font-bold text-slate-900">
          ${formatNumber(totalEarnings)}
        </p>
        <p class="text-sm text-slate-600">Total (14 days)</p>
      </div>
      <div class="text-center">
        <p class="text-lg md:text-xl font-bold text-slate-900">
          ${formatNumber(avgDailyEarnings)}
        </p>
        <p class="text-sm text-slate-600">Daily Average</p>
      </div>
      <div class="text-center">
        <p class="text-lg md:text-xl font-bold text-slate-900">
          ${formatNumber(maxEarnings)}
        </p>
        <p class="text-sm text-slate-600">Highest Day</p>
      </div>
    </div>

    {/* Daily Breakdown */}
    <div class="space-y-3">
      <h3 class="font-semibold text-slate-800 text-base md:text-lg">
        Daily Earnings Breakdown
      </h3>
      <div
        class="max-h-64 overflow-y-auto overflow-x-auto rounded-md border border-slate-200"
      >
        <table class="w-full text-sm min-w-[320px]">
          <thead class="sticky top-0 bg-white">
            <tr class="border-b">
              <th class="py-2 px-2 text-left font-medium text-slate-600">
                Date
              </th>
              <th class="py-2 px-2 text-right font-medium text-slate-600">
                Earnings
              </th>
              <th class="py-2 px-2 text-right font-medium text-slate-600">
                Bar
              </th>
            </tr>
          </thead>
          <tbody>
            {
              earningsData.map((day, index) => {
                const percentage = (day.earnings / maxEarnings) * 100;
                return (
                  <tr class="border-b border-slate-100">
                    <td class="py-2 px-2 text-slate-700">{day.formatted}</td>
                    <td class="py-2 px-2 text-right font-medium text-slate-900">
                      ${formatNumber(day.earnings)}
                    </td>
                    <td class="py-2 px-2 text-right">
                      <div class="flex justify-end">
                        <div class="w-20 sm:w-28 bg-slate-200 rounded-full h-2">
                          <div
                            class="bg-green-500 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${percentage}%` }}
                          />
                        </div>
                      </div>
                    </td>
                  </tr>
                );
              })
            }
          </tbody>
        </table>
      </div>
    </div>
  </CardContent>
</Card>
