---
const { data } = Astro.props;

function formatNumber(n) {
  if (!n) return "-";
  return new Intl.NumberFormat("en", {
    notation: "compact",
    compactDisplay: "short",
    maximumFractionDigits: 1,
  }).format(Number(n));
}

function getRandomBetween(min, max) {
  return Math.random() * (max - min) + min;
}

const today = new Date();
const daysCount = 14;

// Generate daily earnings for current period (last 14 days)
const currentStats = [];
for (let i = daysCount - 1; i >= 0; i--) {
  const date = new Date(today);
  date.setDate(today.getDate() - i);
  // fluctuate daily views ±20% around avgDailyViews
  const dailyViews = data.avgDailyViews * getRandomBetween(0.8, 1.2);
  const dailyEarnings = dailyViews * (data.finalCPM / 1000);
  currentStats.push({
    date: date.toISOString().slice(0, 10),
    earnings: Math.round(dailyEarnings),
  });
}

// Generate previous period (previous 14 days) to calculate growth
const previousStats = [];
for (let i = daysCount * 2 - 1; i >= daysCount; i--) {
  const date = new Date(today);
  date.setDate(today.getDate() - i);
  // fluctuate daily views ±20% around avgDailyViews but slightly lower (simulate growth)
  const dailyViews = data.avgDailyViews * getRandomBetween(0.7, 1.1);
  const dailyEarnings = dailyViews * (data.finalCPM / 1000);
  previousStats.push({
    date: date.toISOString().slice(0, 10),
    earnings: Math.round(dailyEarnings),
  });
}

// Calculate growth between current and previous period
function averageEarnings(stats) {
  return stats.reduce((sum, s) => sum + s.earnings, 0) / stats.length;
}
const avgCurrent = averageEarnings(currentStats);
const avgPrevious = averageEarnings(previousStats);
const weeklyGrowth = ((avgCurrent - avgPrevious) / avgPrevious) * 100; // approx weekly growth %
const monthlyGrowth = weeklyGrowth * 4; // rough monthly growth %

const lowestEarnings = Math.min(...currentStats.map((s) => s.earnings));
const highestEarnings = Math.max(...currentStats.map((s) => s.earnings));

// Forecast next month revenue as current 14-day total * 2 (approx 30 days)
const forecastNextMonth =
  currentStats.reduce((sum, s) => sum + s.earnings, 0) * 2;

// Use yearlyIncome from API as net worth estimate (or you can tweak)
const netWorthEstimate = data.yearlyIncome;
---

<section class="mx-auto max-w-4xl p-6 bg-white rounded-xl shadow mt-8">
  <h2 class="text-xl font-bold text-gray-900">
    {data.title} Channel's Current Stats and Earnings
  </h2>
  <p class="mt-2 text-gray-700 text-sm md:text-base leading-relaxed">
    Here is a detailed overview of <strong>{data.title}</strong>'s estimated
    earnings over the past two weeks, based on average daily views and CPM
    rates. This breakdown helps to understand the channel's recent performance
    and revenue trends.
  </p>

  <ul
    class="mt-4 list-disc list-inside text-gray-700 text-sm md:text-base space-y-2"
  >
    <li>
      During this period, the <strong>lowest daily earnings</strong> were approximately
      <strong>${formatNumber(lowestEarnings)}</strong>.
    </li>
    <li>
      The <strong>highest daily earnings</strong> reached nearly <strong
        >${formatNumber(highestEarnings)}</strong
      >.
    </li>
    <li>
      Compared to the previous two-week period, the channel shows an <strong
        >average weekly growth</strong
      > of <strong>{weeklyGrowth.toFixed(1)}%</strong> and a <strong
        >monthly growth rate</strong
      > of about <strong>{monthlyGrowth.toFixed(1)}%</strong>.
    </li>
  </ul>

  <h3 class="mt-6 font-semibold text-gray-800">
    Estimated Daily Earnings (Last 14 Days)
  </h3>
  <table
    class="w-full mt-2 text-left text-sm md:text-base border border-gray-300 rounded-md overflow-hidden"
  >
    <thead class="bg-gray-100 text-gray-800">
      <tr>
        <th class="p-2 border-r border-gray-300">Date</th>
        <th class="p-2 border-gray-300">Estimated Earnings</th>
      </tr>
    </thead>
    <tbody>
      {
        currentStats.map((day) => (
          <tr class="border-t border-gray-300">
            <td class="p-2 border-r border-gray-300">
              {new Date(day.date).toLocaleDateString("en-US", {
                month: "short",
                day: "numeric",
              })}
            </td>
            <td class="p-2">${formatNumber(day.earnings)}</td>
          </tr>
        ))
      }
    </tbody>
  </table>

  <p class="mt-6 text-gray-800 font-semibold">
    Forecast for next month's revenue:
  </p>
  <p class="text-lg font-bold text-gray-900">
    {data.title}'s estimated net worth for {
      today.toLocaleDateString("en-US", { month: "long", year: "numeric" })
    } is approximately <strong>${formatNumber(netWorthEstimate)}</strong>.
  </p>
</section>
